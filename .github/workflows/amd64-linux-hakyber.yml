name: amd64-linux-hakyber

on:
  workflow_dispatch:
  push:
    branches:
      - hakyber_ref
  pull_request:

jobs:



  compile:
    runs-on: [self-hosted, linux, X64, amd64-main]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: compile
        run: make -j1 -C src/ CI=1 default FILTER=./crypto_kem/%
      - name: print logs
        run: make         -C src/ CI=1 reporter
      - name: return error if there are any errors
        run: make         -C src/ CI=1 err

      - name: libjade-logs-src.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: libjade-logs-src.tar.gz
          path: src/libjade-logs-src.tar.gz



  test:
    needs: [compile]
    runs-on: [self-hosted, linux, X64, amd64-main]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: compile and run
        run: make -j1 -C test/ CI=1 default FILTER=../src/crypto_kem/%
      - name: print logs
        run: make         -C test/ CI=1 reporter
      - name: return error if there are any errors
        run: make         -C test/ CI=1 err

      - name: libjade-logs-test.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: libjade-logs-test.tar.gz
          path: test/libjade-logs-test.tar.gz



  bench1:
    needs: [compile]
    runs-on: [self-hosted, linux, X64, amd64-main]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: compile and run
        run: make -j1 -C bench/ CI=1 run DEFINE='-DTIMINGS=10' FILTER=../src/crypto_kem/%
      - name: print logs
        run: make     -C bench/ CI=1 reporter
      - name: return error if there are any errors
        run: make     -C bench/ CI=1 err

      - name: libjade-logs-bench.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: libjade-logs-bench1.tar.gz
          path: bench/libjade-logs-bench.tar.gz



  bench2:
    needs: [compile]
    runs-on: [self-hosted, linux, X64, amd64-main]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: compile and run
        run: make -j1 -C bench/ CI=1 run DEFINE='-DTIMINGS=10 -DRUNS=2 -DST_ON' RANDINC='../test/common/' RANDLIB='../test/common/notrandombytes.c' FILTER=../src/crypto_kem/%
      - name: print logs
        run: make     -C bench/ CI=1 reporter
      - name: return error if there are any errors
        run: make     -C bench/ CI=1 err

      - name: libjade-logs-bench.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: libjade-logs-bench2.tar.gz
          path: bench/libjade-logs-bench.tar.gz


