require import AllCore IntDiv CoreMap List.
from Jasmin require import JModel.

require import Array6 Array7 Array9 Array24 Array25 Array28.
require import WArray192 WArray200 WArray224 WArray288 WArray768.

abbrev KECCAK_A_JAGGED = Array25.of_list witness [W64.of_int 0; W64.of_int 4;
W64.of_int 5; W64.of_int 6; W64.of_int 7; W64.of_int 10; W64.of_int 24;
W64.of_int 13; W64.of_int 18; W64.of_int 23; W64.of_int 8; W64.of_int 16;
W64.of_int 25; W64.of_int 22; W64.of_int 15; W64.of_int 11; W64.of_int 12;
W64.of_int 21; W64.of_int 26; W64.of_int 19; W64.of_int 9; W64.of_int 20;
W64.of_int 17; W64.of_int 14; W64.of_int 27].


abbrev KECCAK_RHOTATES_RIGHT = Array6.of_list witness [W256.of_int 144373339913893657577751063007562604548177214458152943091773;
W256.of_int 232252764209307188274174373867837442080505530800860351692863;
W256.of_int 156927543384667019098616994515559168111335794127330162507795;
W256.of_int 351517697181654122777866749001917765472957616589092975280182;
W256.of_int 276192476357013953622045746931053922384479139705868246843454;
W256.of_int 313855086769334038206421612937983674734430261968315659321364].


abbrev KECCAK_RHOTATES_LEFT = Array6.of_list witness [W256.of_int 257361171150853911329517531560668107745210100483895842570243;
W256.of_int 169481746855440380633094220700393270212881784141188433969153;
W256.of_int 244806967680080549808651600052671544182051520814718623154221;
W256.of_int 50216813883093446129401845566312946820429698352955810381834;
W256.of_int 125542034707733615285222847637176789908908175236180538818562;
W256.of_int 87879424295413530700846981630247037558957052973733126340652].


abbrev KECCAK_IOTAS = Array24.of_list witness [W256.of_int 6277101735386680764176071790128604879584176795969512275969;
W256.of_int 206504092890751023779864409751650843328560248233805014854828162;
W256.of_int (-57896044618657891154337237002533387566728630465883811983015055433200855646070);
W256.of_int (-57896044605177918687001956587831074660851270707671256656745893357814858874880);
W256.of_int 206560586806369503906741994397762000772476505824968740465311883;
W256.of_int 13479973339852421633450939126351338586088633588469736715148203130881;
W256.of_int (-57896044605177917877255832722949256082138009781081227190387086677747775274879);
W256.of_int (-57896044618657891964083360867415206145441891392473841449373862113267939246071);
W256.of_int 866240039483361945456297907037747473382616397843792694083722;
W256.of_int 853685836012588583927945763457490263623448044251853669531784;
W256.of_int 13480179078138900667299665761280331841242166839448401411882560290825;
W256.of_int 13479973396346337251931066003935984697246077504727327878873813614602;
W256.of_int 13480179894162126267568165104169664557960801185391384887919156166795;
W256.of_int (-57896044618658096836129800417901987324072977609879901317736128966209602322293);
W256.of_int (-57896044618657891160614338737920068330904702256012416862599232229170367922039);
W256.of_int (-57896044618657892001745971279735290730498322133245470726878922889085012901885);
W256.of_int (-57896044618657892008023073015121971494674393923374075606463099685054525177854);
W256.of_int (-57896044618658096905177919507155475730009767301294554993162073721874237357952);
W256.of_int 205750840682504622088163281136835410743010147018288673381711882;
W256.of_int (-57896044605178124312300604384719547540610971740509902075209375727097995067382);
W256.of_int (-57896044605177917877255832722949256082138009781081227190387086677747775274879);
W256.of_int (-57896044618657891217108254356400195208489348367169860778856823392895978405760);
W256.of_int 13479973339852421633450939126351338586088633588469736715148203130881;
W256.of_int (-57896044605177918636785142704737628547442696386642417620072478990058760667128)].


module M = {
  proc __keccakf1600_avx2 (state:W256.t Array7.t) : W256.t Array7.t = {
    
    var iotas_p:W256.t Array24.t;
    var iotas_o:W64.t;
    var rhotates_left_p:W256.t Array6.t;
    var rhotates_right_p:W256.t Array6.t;
    var r:W64.t;
    var zf:bool;
    var c00:W256.t;
    var c14:W256.t;
    var t:W256.t Array9.t;
    var d14:W256.t;
    var d00:W256.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    iotas_p <- witness;
    rhotates_left_p <- witness;
    rhotates_right_p <- witness;
    t <- witness;
    iotas_p <- KECCAK_IOTAS;
    iotas_o <- (W64.of_int 0);
    rhotates_left_p <- KECCAK_RHOTATES_LEFT;
    rhotates_right_p <- KECCAK_RHOTATES_RIGHT;
    r <- (W64.of_int 24);
    c00 <- VPSHUFD_256 state.[2]
    (W8.of_int (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 1))));
    c14 <- (state.[5] `^` state.[3]);
    t.[2] <- (state.[4] `^` state.[6]);
    c14 <- (c14 `^` state.[1]);
    c14 <- (c14 `^` t.[2]);
    t.[4] <- VPERMQ c14
    (W8.of_int (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (1 %% 2^2 + 2^2 * 2))));
    c00 <- (c00 `^` state.[2]);
    t.[0] <- VPERMQ c00
    (W8.of_int (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 1))));
    t.[1] <- (c14 \vshr64u256 (W8.of_int 63));
    t.[2] <- (c14 \vadd64u256 c14);
    t.[1] <- (t.[1] `|` t.[2]);
    d14 <- VPERMQ t.[1]
    (W8.of_int (1 %% 2^2 + 2^2 * (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * 0))));
    d00 <- (t.[1] `^` t.[4]);
    d00 <- VPERMQ d00
    (W8.of_int (0 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 0))));
    c00 <- (c00 `^` state.[0]);
    c00 <- (c00 `^` t.[0]);
    t.[0] <- (c00 \vshr64u256 (W8.of_int 63));
    t.[1] <- (c00 \vadd64u256 c00);
    t.[1] <- (t.[1] `|` t.[0]);
    state.[2] <- (state.[2] `^` d00);
    state.[0] <- (state.[0] `^` d00);
    d14 <- VPBLEND_8u32 d14 t.[1]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    t.[4] <- VPBLEND_8u32 t.[4] c00
    (W8.of_int (1 %% 2^1 +
               2^1 * (1 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    d14 <- (d14 `^` t.[4]);
    t.[3] <- VPSLLV_4u64 state.[2] rhotates_left_p.[0];
    state.[2] <- VPSRLV_4u64 state.[2] rhotates_right_p.[0];
    state.[2] <- (state.[2] `|` t.[3]);
    state.[3] <- (state.[3] `^` d14);
    t.[4] <- VPSLLV_4u64 state.[3] rhotates_left_p.[2];
    state.[3] <- VPSRLV_4u64 state.[3] rhotates_right_p.[2];
    state.[3] <- (state.[3] `|` t.[4]);
    state.[4] <- (state.[4] `^` d14);
    t.[5] <- VPSLLV_4u64 state.[4] rhotates_left_p.[3];
    state.[4] <- VPSRLV_4u64 state.[4] rhotates_right_p.[3];
    state.[4] <- (state.[4] `|` t.[5]);
    state.[5] <- (state.[5] `^` d14);
    t.[6] <- VPSLLV_4u64 state.[5] rhotates_left_p.[4];
    state.[5] <- VPSRLV_4u64 state.[5] rhotates_right_p.[4];
    state.[5] <- (state.[5] `|` t.[6]);
    state.[6] <- (state.[6] `^` d14);
    t.[3] <- VPERMQ state.[2]
    (W8.of_int (1 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 2))));
    t.[4] <- VPERMQ state.[3]
    (W8.of_int (1 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 2))));
    t.[7] <- VPSLLV_4u64 state.[6] rhotates_left_p.[5];
    t.[1] <- VPSRLV_4u64 state.[6] rhotates_right_p.[5];
    t.[1] <- (t.[1] `|` t.[7]);
    state.[1] <- (state.[1] `^` d14);
    t.[5] <- VPERMQ state.[4]
    (W8.of_int (3 %% 2^2 + 2^2 * (2 %% 2^2 + 2^2 * (1 %% 2^2 + 2^2 * 0))));
    t.[6] <- VPERMQ state.[5]
    (W8.of_int (2 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * 1))));
    t.[8] <- VPSLLV_4u64 state.[1] rhotates_left_p.[1];
    t.[2] <- VPSRLV_4u64 state.[1] rhotates_right_p.[1];
    t.[2] <- (t.[2] `|` t.[8]);
    t.[7] <- VPSRLDQ_256 t.[1] (W8.of_int 8);
    t.[0] <- ((invw t.[1]) `&` t.[7]);
    state.[3] <- VPBLEND_8u32 t.[2] t.[6]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[8] <- VPBLEND_8u32 t.[4] t.[2]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[5] <- VPBLEND_8u32 t.[3] t.[4]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[7] <- VPBLEND_8u32 t.[2] t.[3]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[3] <- VPBLEND_8u32 state.[3] t.[4]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[8] <- VPBLEND_8u32 t.[8] t.[5]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[5] <- VPBLEND_8u32 state.[5] t.[2]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[7] <- VPBLEND_8u32 t.[7] t.[6]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[3] <- VPBLEND_8u32 state.[3] t.[5]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    t.[8] <- VPBLEND_8u32 t.[8] t.[6]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    state.[5] <- VPBLEND_8u32 state.[5] t.[6]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    t.[7] <- VPBLEND_8u32 t.[7] t.[4]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    state.[3] <- ((invw state.[3]) `&` t.[8]);
    state.[5] <- ((invw state.[5]) `&` t.[7]);
    state.[6] <- VPBLEND_8u32 t.[5] t.[2]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[8] <- VPBLEND_8u32 t.[3] t.[5]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[3] <- (state.[3] `^` t.[3]);
    state.[6] <- VPBLEND_8u32 state.[6] t.[3]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[8] <- VPBLEND_8u32 t.[8] t.[4]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[5] <- (state.[5] `^` t.[5]);
    state.[6] <- VPBLEND_8u32 state.[6] t.[4]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    t.[8] <- VPBLEND_8u32 t.[8] t.[2]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    state.[6] <- ((invw state.[6]) `&` t.[8]);
    state.[6] <- (state.[6] `^` t.[6]);
    state.[4] <- VPERMQ t.[1]
    (W8.of_int (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (1 %% 2^2 + 2^2 * 0))));
    t.[8] <- VPBLEND_8u32 state.[4] state.[0]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[1] <- VPERMQ t.[1]
    (W8.of_int (1 %% 2^2 + 2^2 * (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * 0))));
    state.[1] <- VPBLEND_8u32 state.[1] state.[0]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    state.[1] <- ((invw state.[1]) `&` t.[8]);
    state.[2] <- VPBLEND_8u32 t.[4] t.[5]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[7] <- VPBLEND_8u32 t.[6] t.[4]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[2] <- VPBLEND_8u32 state.[2] t.[6]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[7] <- VPBLEND_8u32 t.[7] t.[3]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[2] <- VPBLEND_8u32 state.[2] t.[3]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    t.[7] <- VPBLEND_8u32 t.[7] t.[5]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    state.[2] <- ((invw state.[2]) `&` t.[7]);
    state.[2] <- (state.[2] `^` t.[2]);
    t.[0] <- VPERMQ t.[0]
    (W8.of_int (0 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 0))));
    state.[3] <- VPERMQ state.[3]
    (W8.of_int (3 %% 2^2 + 2^2 * (2 %% 2^2 + 2^2 * (1 %% 2^2 + 2^2 * 0))));
    state.[5] <- VPERMQ state.[5]
    (W8.of_int (1 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 2))));
    state.[6] <- VPERMQ state.[6]
    (W8.of_int (2 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * 1))));
    state.[4] <- VPBLEND_8u32 t.[6] t.[3]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[7] <- VPBLEND_8u32 t.[5] t.[6]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (1 %% 2^1 +
                           2^1 * (1 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[4] <- VPBLEND_8u32 state.[4] t.[5]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    t.[7] <- VPBLEND_8u32 t.[7] t.[2]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (1 %% 2^1 +
                                       2^1 * (1 %% 2^1 +
                                             2^1 * (0 %% 2^1 + 2^1 * 0))))))));
    state.[4] <- VPBLEND_8u32 state.[4] t.[2]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    t.[7] <- VPBLEND_8u32 t.[7] t.[3]
    (W8.of_int (0 %% 2^1 +
               2^1 * (0 %% 2^1 +
                     2^1 * (0 %% 2^1 +
                           2^1 * (0 %% 2^1 +
                                 2^1 * (0 %% 2^1 +
                                       2^1 * (0 %% 2^1 +
                                             2^1 * (1 %% 2^1 + 2^1 * 1))))))));
    state.[4] <- ((invw state.[4]) `&` t.[7]);
    state.[0] <- (state.[0] `^` t.[0]);
    state.[1] <- (state.[1] `^` t.[1]);
    state.[4] <- (state.[4] `^` t.[4]);
    state.[0] <-
    (state.[0] `^` (get256_direct (WArray768.init256 (fun i => iotas_p.[i]))
                   (W64.to_uint iotas_o)));
    iotas_o <- (iotas_o + (W64.of_int 32));
    ( _0,  _1,  _2, zf, r) <- DEC_64 r;
    while ((! zf)) {
      c00 <- VPSHUFD_256 state.[2]
      (W8.of_int (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 1))));
      c14 <- (state.[5] `^` state.[3]);
      t.[2] <- (state.[4] `^` state.[6]);
      c14 <- (c14 `^` state.[1]);
      c14 <- (c14 `^` t.[2]);
      t.[4] <- VPERMQ c14
      (W8.of_int (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (1 %% 2^2 + 2^2 * 2))));
      c00 <- (c00 `^` state.[2]);
      t.[0] <- VPERMQ c00
      (W8.of_int (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 1))));
      t.[1] <- (c14 \vshr64u256 (W8.of_int 63));
      t.[2] <- (c14 \vadd64u256 c14);
      t.[1] <- (t.[1] `|` t.[2]);
      d14 <- VPERMQ t.[1]
      (W8.of_int (1 %% 2^2 + 2^2 * (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * 0))));
      d00 <- (t.[1] `^` t.[4]);
      d00 <- VPERMQ d00
      (W8.of_int (0 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 0))));
      c00 <- (c00 `^` state.[0]);
      c00 <- (c00 `^` t.[0]);
      t.[0] <- (c00 \vshr64u256 (W8.of_int 63));
      t.[1] <- (c00 \vadd64u256 c00);
      t.[1] <- (t.[1] `|` t.[0]);
      state.[2] <- (state.[2] `^` d00);
      state.[0] <- (state.[0] `^` d00);
      d14 <- VPBLEND_8u32 d14 t.[1]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      t.[4] <- VPBLEND_8u32 t.[4] c00
      (W8.of_int (1 %% 2^1 +
                 2^1 * (1 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      d14 <- (d14 `^` t.[4]);
      t.[3] <- VPSLLV_4u64 state.[2] rhotates_left_p.[0];
      state.[2] <- VPSRLV_4u64 state.[2] rhotates_right_p.[0];
      state.[2] <- (state.[2] `|` t.[3]);
      state.[3] <- (state.[3] `^` d14);
      t.[4] <- VPSLLV_4u64 state.[3] rhotates_left_p.[2];
      state.[3] <- VPSRLV_4u64 state.[3] rhotates_right_p.[2];
      state.[3] <- (state.[3] `|` t.[4]);
      state.[4] <- (state.[4] `^` d14);
      t.[5] <- VPSLLV_4u64 state.[4] rhotates_left_p.[3];
      state.[4] <- VPSRLV_4u64 state.[4] rhotates_right_p.[3];
      state.[4] <- (state.[4] `|` t.[5]);
      state.[5] <- (state.[5] `^` d14);
      t.[6] <- VPSLLV_4u64 state.[5] rhotates_left_p.[4];
      state.[5] <- VPSRLV_4u64 state.[5] rhotates_right_p.[4];
      state.[5] <- (state.[5] `|` t.[6]);
      state.[6] <- (state.[6] `^` d14);
      t.[3] <- VPERMQ state.[2]
      (W8.of_int (1 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 2))));
      t.[4] <- VPERMQ state.[3]
      (W8.of_int (1 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 2))));
      t.[7] <- VPSLLV_4u64 state.[6] rhotates_left_p.[5];
      t.[1] <- VPSRLV_4u64 state.[6] rhotates_right_p.[5];
      t.[1] <- (t.[1] `|` t.[7]);
      state.[1] <- (state.[1] `^` d14);
      t.[5] <- VPERMQ state.[4]
      (W8.of_int (3 %% 2^2 + 2^2 * (2 %% 2^2 + 2^2 * (1 %% 2^2 + 2^2 * 0))));
      t.[6] <- VPERMQ state.[5]
      (W8.of_int (2 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * 1))));
      t.[8] <- VPSLLV_4u64 state.[1] rhotates_left_p.[1];
      t.[2] <- VPSRLV_4u64 state.[1] rhotates_right_p.[1];
      t.[2] <- (t.[2] `|` t.[8]);
      t.[7] <- VPSRLDQ_256 t.[1] (W8.of_int 8);
      t.[0] <- ((invw t.[1]) `&` t.[7]);
      state.[3] <- VPBLEND_8u32 t.[2] t.[6]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[8] <- VPBLEND_8u32 t.[4] t.[2]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[5] <- VPBLEND_8u32 t.[3] t.[4]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[7] <- VPBLEND_8u32 t.[2] t.[3]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[3] <- VPBLEND_8u32 state.[3] t.[4]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[8] <- VPBLEND_8u32 t.[8] t.[5]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[5] <- VPBLEND_8u32 state.[5] t.[2]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[7] <- VPBLEND_8u32 t.[7] t.[6]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[3] <- VPBLEND_8u32 state.[3] t.[5]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      t.[8] <- VPBLEND_8u32 t.[8] t.[6]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      state.[5] <- VPBLEND_8u32 state.[5] t.[6]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      t.[7] <- VPBLEND_8u32 t.[7] t.[4]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      state.[3] <- ((invw state.[3]) `&` t.[8]);
      state.[5] <- ((invw state.[5]) `&` t.[7]);
      state.[6] <- VPBLEND_8u32 t.[5] t.[2]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[8] <- VPBLEND_8u32 t.[3] t.[5]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[3] <- (state.[3] `^` t.[3]);
      state.[6] <- VPBLEND_8u32 state.[6] t.[3]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[8] <- VPBLEND_8u32 t.[8] t.[4]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[5] <- (state.[5] `^` t.[5]);
      state.[6] <- VPBLEND_8u32 state.[6] t.[4]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      t.[8] <- VPBLEND_8u32 t.[8] t.[2]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      state.[6] <- ((invw state.[6]) `&` t.[8]);
      state.[6] <- (state.[6] `^` t.[6]);
      state.[4] <- VPERMQ t.[1]
      (W8.of_int (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (1 %% 2^2 + 2^2 * 0))));
      t.[8] <- VPBLEND_8u32 state.[4] state.[0]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[1] <- VPERMQ t.[1]
      (W8.of_int (1 %% 2^2 + 2^2 * (2 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * 0))));
      state.[1] <- VPBLEND_8u32 state.[1] state.[0]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      state.[1] <- ((invw state.[1]) `&` t.[8]);
      state.[2] <- VPBLEND_8u32 t.[4] t.[5]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[7] <- VPBLEND_8u32 t.[6] t.[4]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[2] <- VPBLEND_8u32 state.[2] t.[6]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[7] <- VPBLEND_8u32 t.[7] t.[3]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[2] <- VPBLEND_8u32 state.[2] t.[3]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      t.[7] <- VPBLEND_8u32 t.[7] t.[5]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      state.[2] <- ((invw state.[2]) `&` t.[7]);
      state.[2] <- (state.[2] `^` t.[2]);
      t.[0] <- VPERMQ t.[0]
      (W8.of_int (0 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 0))));
      state.[3] <- VPERMQ state.[3]
      (W8.of_int (3 %% 2^2 + 2^2 * (2 %% 2^2 + 2^2 * (1 %% 2^2 + 2^2 * 0))));
      state.[5] <- VPERMQ state.[5]
      (W8.of_int (1 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * 2))));
      state.[6] <- VPERMQ state.[6]
      (W8.of_int (2 %% 2^2 + 2^2 * (0 %% 2^2 + 2^2 * (3 %% 2^2 + 2^2 * 1))));
      state.[4] <- VPBLEND_8u32 t.[6] t.[3]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[7] <- VPBLEND_8u32 t.[5] t.[6]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (1 %% 2^1 +
                             2^1 * (1 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[4] <- VPBLEND_8u32 state.[4] t.[5]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      t.[7] <- VPBLEND_8u32 t.[7] t.[2]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (1 %% 2^1 +
                                         2^1 * (1 %% 2^1 +
                                               2^1 * (0 %% 2^1 + 2^1 * 0))))))));
      state.[4] <- VPBLEND_8u32 state.[4] t.[2]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      t.[7] <- VPBLEND_8u32 t.[7] t.[3]
      (W8.of_int (0 %% 2^1 +
                 2^1 * (0 %% 2^1 +
                       2^1 * (0 %% 2^1 +
                             2^1 * (0 %% 2^1 +
                                   2^1 * (0 %% 2^1 +
                                         2^1 * (0 %% 2^1 +
                                               2^1 * (1 %% 2^1 + 2^1 * 1))))))));
      state.[4] <- ((invw state.[4]) `&` t.[7]);
      state.[0] <- (state.[0] `^` t.[0]);
      state.[1] <- (state.[1] `^` t.[1]);
      state.[4] <- (state.[4] `^` t.[4]);
      state.[0] <-
      (state.[0] `^` (get256_direct
                     (WArray768.init256 (fun i => iotas_p.[i]))
                     (W64.to_uint iotas_o)));
      iotas_o <- (iotas_o + (W64.of_int 32));
      ( _0,  _1,  _2, zf, r) <- DEC_64 r;
    }
    return (state);
  }
  
  proc __keccak_init_avx2 () : W256.t Array7.t = {
    var aux: int;
    
    var state:W256.t Array7.t;
    var i:int;
    state <- witness;
    i <- 0;
    while (i < 7) {
      state.[i] <- setw0_256 ;
      i <- i + 1;
    }
    return (state);
  }
  
  proc __init_s_state_avx2 () : W64.t Array28.t = {
    var aux: int;
    
    var s_state:W64.t Array28.t;
    var zero:W256.t;
    var i:int;
    s_state <- witness;
    zero <- setw0_256 ;
    i <- 0;
    while (i < 7) {
      s_state <-
      Array28.init
      (WArray224.get64 (WArray224.set256 (WArray224.init64 (fun i => s_state.[i])) i zero));
      i <- i + 1;
    }
    return (s_state);
  }
  
  proc __add_full_block_avx2 (state:W256.t Array7.t, s_state:W64.t Array28.t,
                              a_jagged_p:W64.t Array25.t, in_0:W64.t,
                              inlen:W64.t, rate:W64.t) : W256.t Array7.t *
                                                         W64.t Array28.t *
                                                         W64.t * W64.t = {
    var aux: int;
    
    var rate8:W64.t;
    var j:W64.t;
    var t:W64.t;
    var l:W64.t;
    var i:int;
    
    rate8 <- rate;
    rate8 <- (rate8 `>>` (W8.of_int 3));
    j <- (W64.of_int 0);
    
    while ((j \ult rate8)) {
      t <- (loadW64 Glob.mem (W64.to_uint (in_0 + ((W64.of_int 8) * j))));
      l <- a_jagged_p.[(W64.to_uint j)];
      s_state.[(W64.to_uint l)] <- t;
      j <- (j + (W64.of_int 1));
    }
    t <- s_state.[0];
    s_state.[1] <- t;
    s_state.[2] <- t;
    s_state.[3] <- t;
    i <- 0;
    while (i < 7) {
      state.[i] <-
      (state.[i] `^` (get256 (WArray224.init64 (fun i => s_state.[i])) i));
      i <- i + 1;
    }
    in_0 <- (in_0 + rate);
    inlen <- (inlen - rate);
    return (state, s_state, in_0, inlen);
  }
  
  proc __add_final_block_avx2 (state:W256.t Array7.t,
                               s_state:W64.t Array28.t,
                               a_jagged_p:W64.t Array25.t, in_0:W64.t,
                               inlen:W64.t, trail_byte:W8.t, rate:W64.t) : 
  W256.t Array7.t = {
    var aux: int;
    
    var inlen8:W64.t;
    var j:W64.t;
    var t:W64.t;
    var l:W64.t;
    var c:W8.t;
    var i:int;
    
    s_state <@ __init_s_state_avx2 ();
    inlen8 <- inlen;
    inlen8 <- (inlen8 `>>` (W8.of_int 3));
    j <- (W64.of_int 0);
    
    while ((j \ult inlen8)) {
      t <- (loadW64 Glob.mem (W64.to_uint (in_0 + ((W64.of_int 8) * j))));
      l <- a_jagged_p.[(W64.to_uint j)];
      s_state.[(W64.to_uint l)] <- t;
      j <- (j + (W64.of_int 1));
    }
    l <- a_jagged_p.[(W64.to_uint j)];
    l <- (l `<<` (W8.of_int 3));
    j <- (j `<<` (W8.of_int 3));
    
    while ((j \ult inlen)) {
      c <- (loadW8 Glob.mem (W64.to_uint (in_0 + j)));
      s_state <-
      Array28.init
      (WArray224.get64 (WArray224.set8 (WArray224.init64 (fun i => s_state.[i])) (W64.to_uint l) c));
      j <- (j + (W64.of_int 1));
      l <- (l + (W64.of_int 1));
    }
    s_state <-
    Array28.init
    (WArray224.get64 (WArray224.set8 (WArray224.init64 (fun i => s_state.[i])) (W64.to_uint l) trail_byte));
    j <- rate;
    j <- (j - (W64.of_int 1));
    j <- (j `>>` (W8.of_int 3));
    l <- a_jagged_p.[(W64.to_uint j)];
    l <- (l `<<` (W8.of_int 3));
    j <- rate;
    j <- (j - (W64.of_int 1));
    j <- (j `&` (W64.of_int 7));
    l <- (l + j);
    s_state <-
    Array28.init
    (WArray224.get64 (WArray224.set8 (WArray224.init64 (fun i => s_state.[i])) (W64.to_uint l) (
    (get8 (WArray224.init64 (fun i => s_state.[i])) (W64.to_uint l)) `^` (W8.of_int 128))));
    t <- s_state.[0];
    s_state.[1] <- t;
    s_state.[2] <- t;
    s_state.[3] <- t;
    i <- 0;
    while (i < 7) {
      state.[i] <-
      (state.[i] `^` (get256 (WArray224.init64 (fun i => s_state.[i])) i));
      i <- i + 1;
    }
    return (state);
  }
  
  proc __xtr_full_block_avx2 (state:W256.t Array7.t,
                              a_jagged_p:W64.t Array25.t, out:W64.t,
                              len:W64.t) : W64.t = {
    var aux: int;
    
    var i:int;
    var s_state:W64.t Array28.t;
    var len8:W64.t;
    var j:W64.t;
    var l:W64.t;
    var t:W64.t;
    s_state <- witness;
    i <- 0;
    while (i < 7) {
      s_state <-
      Array28.init
      (WArray224.get64 (WArray224.set256 (WArray224.init64 (fun i => s_state.[i])) i 
      state.[i]));
      i <- i + 1;
    }
    len8 <- len;
    len8 <- (len8 `>>` (W8.of_int 3));
    j <- (W64.of_int 0);
    
    while ((j \ult len8)) {
      l <- a_jagged_p.[(W64.to_uint j)];
      t <- s_state.[(W64.to_uint l)];
      Glob.mem <-
      storeW64 Glob.mem (W64.to_uint (out + ((W64.of_int 8) * j))) t;
      j <- (j + (W64.of_int 1));
    }
    out <- (out + len);
    return (out);
  }
  
  proc __xtr_bytes_avx2 (state:W256.t Array7.t, a_jagged_p:W64.t Array25.t,
                         out:W64.t, len:W64.t) : W64.t = {
    var aux: int;
    
    var i:int;
    var s_state:W64.t Array28.t;
    var len8:W64.t;
    var j:W64.t;
    var l:W64.t;
    var t:W64.t;
    var c:W8.t;
    s_state <- witness;
    i <- 0;
    while (i < 7) {
      s_state <-
      Array28.init
      (WArray224.get64 (WArray224.set256 (WArray224.init64 (fun i => s_state.[i])) i 
      state.[i]));
      i <- i + 1;
    }
    len8 <- len;
    len8 <- (len8 `>>` (W8.of_int 3));
    j <- (W64.of_int 0);
    
    while ((j \ult len8)) {
      l <- a_jagged_p.[(W64.to_uint j)];
      t <- s_state.[(W64.to_uint l)];
      Glob.mem <-
      storeW64 Glob.mem (W64.to_uint (out + ((W64.of_int 8) * j))) t;
      j <- (j + (W64.of_int 1));
    }
    l <- a_jagged_p.[(W64.to_uint j)];
    j <- (j `<<` (W8.of_int 3));
    l <- (l `<<` (W8.of_int 3));
    
    while ((j \ult len)) {
      c <- (get8 (WArray224.init64 (fun i => s_state.[i])) (W64.to_uint l));
      Glob.mem <- storeW8 Glob.mem (W64.to_uint (out + j)) c;
      j <- (j + (W64.of_int 1));
      l <- (l + (W64.of_int 1));
    }
    out <- (out + len);
    return (out);
  }
  
  proc __absorb_avx2 (state:W256.t Array7.t, in_0:W64.t, inlen:W64.t,
                      trail_byte:W8.t, rate:W64.t) : W256.t Array7.t = {
    
    var a_jagged_p:W64.t Array25.t;
    var s_state:W64.t Array28.t;
    a_jagged_p <- witness;
    s_state <- witness;
    a_jagged_p <- KECCAK_A_JAGGED;
    s_state <@ __init_s_state_avx2 ();
    
    while ((rate \ule inlen)) {
      (state, s_state, in_0, inlen) <@ __add_full_block_avx2 (state, s_state,
      a_jagged_p, in_0, inlen, rate);
      state <@ __keccakf1600_avx2 (state);
    }
    state <@ __add_final_block_avx2 (state, s_state, a_jagged_p, in_0, inlen,
    trail_byte, rate);
    return (state);
  }
  
  proc __squeeze_avx2 (state:W256.t Array7.t, out:W64.t, outlen:W64.t,
                       rate:W64.t) : unit = {
    
    var a_jagged_p:W64.t Array25.t;
    a_jagged_p <- witness;
    a_jagged_p <- KECCAK_A_JAGGED;
    
    while ((rate \ult outlen)) {
      state <@ __keccakf1600_avx2 (state);
      out <@ __xtr_full_block_avx2 (state, a_jagged_p, out, rate);
      outlen <- (outlen - rate);
    }
    state <@ __keccakf1600_avx2 (state);
    out <@ __xtr_bytes_avx2 (state, a_jagged_p, out, outlen);
    return ();
  }
  
  proc __keccak1600_avx2 (out:W64.t, outlen:W64.t, in_0:W64.t, inlen:W64.t,
                          trail_byte:W8.t, rate:W64.t) : unit = {
    
    var state:W256.t Array7.t;
    state <- witness;
    state <@ __keccak_init_avx2 ();
    state <@ __absorb_avx2 (state, in_0, inlen, trail_byte, rate);
    __squeeze_avx2 (state, out, outlen, rate);
    return ();
  }
  
  proc _keccak1600_avx2 (out:W64.t, outlen:W64.t, in_0:W64.t, inlen:W64.t,
                         trail_byte:W8.t, rate:W64.t) : unit = {
    
    
    
    __keccak1600_avx2 (out, outlen, in_0, inlen, trail_byte, rate);
    return ();
  }
  
  proc __sha3_224_avx2 (out:W64.t, in_0:W64.t, inlen:W64.t) : unit = {
    
    var outlen:W64.t;
    var trail_byte:W8.t;
    var rate:W64.t;
    
    outlen <- (W64.of_int (224 %/ 8));
    trail_byte <- (W8.of_int 6);
    rate <- (W64.of_int (1152 %/ 8));
    _keccak1600_avx2 (out, outlen, in_0, inlen, trail_byte, rate);
    return ();
  }
  
  proc jade_hash_sha3_224_amd64_avx2 (out:W64.t, in_0:W64.t, inlen:W64.t) : 
  W64.t = {
    
    var r:W64.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    
    __sha3_224_avx2 (out, in_0, inlen);
    ( _0,  _1,  _2,  _3,  _4, r) <- set0_64 ;
    return (r);
  }
}.

