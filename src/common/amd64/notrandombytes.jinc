// this is a Jasmin implementation of PQClean/test/common

/**
 * WARNING
 *
 * This file generates a PREDICTABLE and NOT AT ALL RANDOM sequence of bytes.
 *
 * Its purpose is to support our testing suite and it MUST NOT be used in any
 * scenario where you are expecting actual cryptography to happen.
 */

u32[32] NRB_SEED = {
  3, 1, 4, 1,   5, 9, 2, 6,   5, 3, 5, 8,   9, 7, 9, 3,
  2, 3, 8, 4,   6, 2, 6, 4,   3, 3, 8, 3,   2, 7, 9, 5
};

inline fn __nrb_mush(stack u32[12] t, reg u32 x sum, inline int i b) -> stack u32[12], reg u32
{
  reg u32 y z;

  y = x;
  _, _, y = #ROL_32(y , b);

  x ^= NRB_SEED[i];
  x += sum;
  x ^= y;
  x += t[i];

  t[i] = x;

  return t, x;
}

fn _nrb_mush(reg ptr u32[12] t, reg u32 x sum, reg u64 i b, reg ptr u32[32] seed) -> reg ptr u32[12], reg u32
{
  reg u32 y z;

  y = x;
  _, _, y = #ROL_32(y , b);

  x ^= seed[(int) i];
  x += sum;
  x ^= y;
  x += t[(int) i];

  t[(int) i] = x;

  return t, x;
}

inline fn __nrb_surf(stack u32[12] in) -> stack u32[8]
{
  inline int i;
  stack u32[12] t;
  stack u32[8] out;
  reg u32 loop r x sum;
  reg u32 a b;

  for i=0 to 12
  { a = in[i]; a ^= NRB_SEED[12 + i]; t[i] = a; }

  for i=0 to 8
  { b = NRB_SEED[24 + i]; out[i] = b; }

  x = t[11];
  sum = 0;

  loop = 0;
  while(loop < 2)
  { r = 0;
    while(r < 16)
    { sum += 0x9e3779b9;
      t, x = __nrb_mush(t, x, sum, 0, 5);
      t, x = __nrb_mush(t, x, sum, 1, 7);
      t, x = __nrb_mush(t, x, sum, 2, 9);
      t, x = __nrb_mush(t, x, sum, 3, 13);
      t, x = __nrb_mush(t, x, sum, 4, 5);
      t, x = __nrb_mush(t, x, sum, 5, 7);
      t, x = __nrb_mush(t, x, sum, 6, 9);
      t, x = __nrb_mush(t, x, sum, 7, 13);
      t, x = __nrb_mush(t, x, sum, 8, 5);
      t, x = __nrb_mush(t, x, sum, 9, 7);
      t, x = __nrb_mush(t, x, sum, 10, 9);
      t, x = __nrb_mush(t, x, sum, 11, 13);
      r += 1;
    }

    for i=0 to 8
    { a = t[i+4]; a ^= out[i]; out[i] = a; }

    loop += 1;
  }

  return out;
}

#[returnaddress="stack"]
fn _nrb_surf(reg ptr u32[8] out, reg ptr u32[12] in, reg ptr u32[32] seed) -> reg ptr u32[8]
{
  reg u64 i b;
  stack u32[12] t;
  reg ptr u32[12] tp;
  reg u32 loop r x z sum;

  i = 0;
  while(i < 12)
  { x = in[(int) i];
    x ^= seed[(int)i + 12];
    t[(int) i] = x;
    i += 1;
  }

  i = 0;
  while(i < 8) {
    x = seed[(int)i + 24];
    out[(int) i] = x;
    i += 1;
  }

  x = t[11];
  sum = 0;
  tp = t;
  loop = 0;
  while(loop < 2)
  { r = 0;
    while(r < 16)
    { sum += 0x9e3779b9;
      i = 0;
      while(i < 12)
      {                                                    b = 5;
        tp, x = _nrb_mush(tp, x, sum, i, b, seed); i += 1; b = 7;
        tp, x = _nrb_mush(tp, x, sum, i, b, seed); i += 1; b = 9;
        tp, x = _nrb_mush(tp, x, sum, i, b, seed); i += 1; b = 13;
        tp, x = _nrb_mush(tp, x, sum, i, b, seed); i += 1;
      }
      r += 1;
    }

    i = 0;
    while(i < 8)
    { z = tp[(int) i + 4];
      z ^= out[(int) i];
      out[(int) i] = z;
      i += 1;
    }

    loop += 1;
  }

  return out;
}

// _buf <-> reg ptr u8[n] _buf
// _in <-> reg ptr u32[12+8+1] _in ; _in[0..11+8] = {0} in the first call ; _in[20] is outleft;
#[returnaddress="stack"]
fn _nrb_randombytes_0(reg u64 _buf _inout _n) -> reg u64
{
  reg u64 i r outleft;
  stack u32[8] out;
  stack u32[12] in;
  reg ptr u32[32] seed;
  reg u32 v;
  reg u8 t;

  // load in & out
  i = 0;
  while(i < 12)
  { v = (u32)[_inout + i*4];
    in[(int) i] = v;
    i += 1;
  }

  while(i < 20)
  { v = (u32)[_inout + i*4];
    out[(int) i - 12] = v;
    i += 1;
  }

  outleft = (64u)(u32)[_inout + i*4];

  // loop
  seed = NRB_SEED;
  while(_n > 0)
  {  if(outleft == 0)
     { in[u64 0] += 1; // different from .c
       out = _nrb_surf(out, in, seed);
       outleft = 8;
     }

     outleft -= 1;
     v = out[(int) outleft];
     t = (8u) v;
     (u8) [_buf + 0] = t;
     _buf += 1;
     _n -= 1;
  }

  // store in & out
  i = 0;
  while(i < 12)
  { v = in[(int) i];
    (u32)[_inout + i*4] = v;
    i += 1;
  }

  while(i < (12+8))
  { v = out[(int) i - 12];
    (u32)[_inout + i*4] = v;
    i += 1;
  }

  (u32)[_inout + 20*4] = (32u) outleft;

  r = 0;
  return r;
}
